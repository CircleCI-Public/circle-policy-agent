version: 2.1

orbs:
  snyk: snyk/snyk@1.7.0

executors:
  go:
    docker:
      - image: cimg/go:1.20
    environment:
      CGO_ENABLED: 0

jobs:
  lint:
    executor: go
    steps:
      - checkout
      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.51.2
      - run: golangci-lint run -c .golangci.yml
      - run:
          name: check go.mod
          command: go mod tidy -v && git diff --exit-code -- go.mod go.sum

  test:
    executor: go
    steps:
      - checkout
      - run: go install gotest.tools/gotestsum@v1.8.1
      - run: mkdir -p /tmp/test-results
      - run: CGO_ENABLED=1 gotestsum --junitfile="{{.RESULTS_DIR}}"/results.xml ./... -race -count=1
      - run:
          name: Generate coverage report
          command: |
            go test ./... -coverprofile=coverage.out
            go tool cover -html=coverage.out -o coverage.html
            mv coverage.html /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - store_test_results:
          path: /tmp/test-results

  publish:
    executor: go
    steps:
      - add_ssh_keys:
          fingerprints:
            - '83:6d:88:ca:4a:cd:25:87:37:a9:5f:47:91:7e:76:4b'
      - checkout
      - run:
          name: Tag Repo
          command: |
            git config user.email "securityengineering@circleci.com"
            git config user.name "Security-Engineering Bot"
            git tag -a "v0.0.$CIRCLE_BUILD_NUM" -m "Release v0.0.$CIRCLE_BUILD_NUM"
            git push origin "v0.0.$CIRCLE_BUILD_NUM"

  vulnerability-scan:
    executor: go
    steps:
      - checkout
      - run:
          name: Setup Scanning
          command: |
              git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
      - when:
          condition:
              or:
                - equal: [ main, << pipeline.git.branch >> ]
          steps:
              - run:
                  name: Launching Snyk Orb Scanning
                  command: echo "Running snyk/scan on main; uploading the results"
              - run:
                  name: Cleanup RemoteRepoURL
                  command: echo 'export REMOTE_REPO_URL="${CIRCLE_REPOSITORY_URL%".git"}"' >> "$BASH_ENV"
              - snyk/scan:
                  organization: "circleci-public"
                  fail-on-issues: true
                  severity-threshold: high
                  monitor-on-build: true
                  additional-arguments: "--all-projects --remote-repo-url=${REMOTE_REPO_URL} -d"
      - unless:
          condition:
              or:
                - equal: [ main, << pipeline.git.branch >> ]
          steps:
              - run:
                  name: Launching Snyk Orb Scanning
                  command: echo "Running snyk/scan on branch; not uploading the results"
              - snyk/scan:
                  organization: "circleci-public"
                  fail-on-issues: true
                  severity-threshold: high
                  monitor-on-build: false
                  additional-arguments: "--all-projects -d"

workflows:
  main:
    jobs:
      - lint
      - test
      - vulnerability-scan:
          context: org-global-employees
          requires:
            - lint
            - test
      - publish:
          requires:
            - lint
            - test
          filters:
            branches:
              only:
                - main
